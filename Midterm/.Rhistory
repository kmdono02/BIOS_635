cv_results_all <- do.call("rbind", cv_results)
return(cv_results_all)
}
methods <- c("linear", "spline")
analysis_all <- list()
for(i in 1:length(methods)){
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
}
train_test_fn <-
function(data=bank_data, y_var="y",
x_var=names(bank_data %>%
select(-c("y"))),
method,
k_folds=10){
# Create partitions
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
for(i in 1:k_folds){
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="linear"){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0("`", x_var, "`", collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
if(method=="spline"){
cubic_preds <- c("age", "cons.price.idx", "cons.conf.idx")
linear_preds <- x_var[!x_var%in%cubic_preds]
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0(linear_preds, collapse = " + "), "+",
paste0("ns(`", cubic_preds, "`, df=4)",
collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
stop("No applicable model selected")
}
}
# Test
test_data$predicted <-
factor(ifelse(predict(model_fit, newdata=test_data, type="response")>0.5,
"yes", "no"))
# Report metrics
cv_results[[i]] <- postResample(test_data$predicted,
test_data[[y_var]])
}
# Zip everything together to return
cv_results_all <- do.call("rbind", cv_results)
return(cv_results_all)
}
# Do for linear and spline
methods <- c("linear", "spline")
analysis_all <- list()
for(i in 1:length(methods)){
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
}
i
data=bank_data
y_var="y"
x_var=names(bank_data %>%
select(-c("y")))
k_folds=10
method="linear"
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
i=1
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="linear"){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0("`", x_var, "`", collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
if(method=="spline"){
cubic_preds <- c("age", "cons.price.idx", "cons.conf.idx")
linear_preds <- x_var[!x_var%in%cubic_preds]
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0(linear_preds, collapse = " + "), "+",
paste0("ns(`", cubic_preds, "`, df=4)",
collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
stop("No applicable model selected")
}
}
i
test_data$predicted <-
factor(ifelse(predict(model_fit, newdata=test_data, type="response")>0.5,
"yes", "no"))
# CV train and test
cv_results <- list()
for(i in 1:k_folds){
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="linear"){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0("`", x_var, "`", collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
if(method=="spline"){
cubic_preds <- c("age", "cons.price.idx", "cons.conf.idx")
linear_preds <- x_var[!x_var%in%cubic_preds]
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0(linear_preds, collapse = " + "), "+",
paste0("ns(`", cubic_preds, "`, df=4)",
collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
stop("No applicable model selected")
}
}
# Create partitions
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
for(i in 1:k_folds){
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="linear"){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0("`", x_var, "`", collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
if(method=="spline"){
cubic_preds <- c("age", "cons.price.idx", "cons.conf.idx")
linear_preds <- x_var[!x_var%in%cubic_preds]
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0(linear_preds, collapse = " + "), "+",
paste0("ns(`", cubic_preds, "`, df=4)",
collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
stop("No applicable model selected")
}
}
# Test
test_data$predicted <-
factor(ifelse(predict(model_fit, newdata=test_data, type="response")>0.5,
"yes", "no"))
# Report metrics
cv_results[[i]] <- postResample(test_data$predicted,
test_data[[y_var]])
}
i
cv_results_all <- do.call("rbind", cv_results)
cv_results_all
method
train_test_fn <-
function(data=bank_data, y_var="y",
x_var=names(bank_data %>%
select(-c("y"))),
method,
k_folds=10){
# Create partitions
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
for(i in 1:k_folds){
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="linear"){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0("`", x_var, "`", collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
if(method=="spline"){
cubic_preds <- c("age", "cons.price.idx", "cons.conf.idx")
linear_preds <- x_var[!x_var%in%cubic_preds]
model_fmrla <- as.formula(paste0("`", y_var, "` ~",
paste0(linear_preds, collapse = " + "), "+",
paste0("ns(`", cubic_preds, "`, df=4)",
collapse="+")))
model_fit <- gam(formula=model_fmrla,
family=binomial,
data=train_data)
}else{
stop("No applicable model selected")
}
}
# Test
test_data$predicted <-
factor(ifelse(predict(model_fit, newdata=test_data, type="response")>0.5,
"yes", "no"))
# Report metrics
cv_results[[i]] <- postResample(test_data$predicted,
test_data[[y_var]])
}
# Zip everything together to return
cv_results_all <- do.call("rbind", cv_results)
return(cv_results_all)
}
# Do for linear and spline
methods <- c("linear", "spline")
analysis_all <- list()
for(i in 1:length(methods)){
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
}
analysis_all
analysis_all[[1]]
analysis_all[[2]]
do.call("rbind", analysis_all)
oasis_data
data=oasis_data %>%
mutate(SES=factor(ifelse(as.numeric(SES)>4, 4, as.numeric(SES))),
`M/F`=factor(`M/F`))
y_var="CDR"
x_var=names(oasis_data %>%
select(-c("Subject ID", "MRI ID", "Group", "CDR",
"MR Delay", "Visit", "Hand")))
method="qdr"
k_folds
model_fmrla <- as.formula(paste0("`", y_var, "` ~", paste0("`", x_var, "`", collapse="+")))
# Create partitions
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
k=1
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
model_fit <- train(x=train_data[x_var], y=train_data[[y_var]],
method="qda")
train_data[x_var]
train_data[x_var]
train_data["Age"]
train_data["Age"]
train(x=train_data["Age"], y=train_data[[y_var]],
method="qda")
x_var
train(x=train_data["M/F"], y=train_data[[y_var]],
method="qda")
data=oasis_data %>%
mutate(SES=factor(ifelse(as.numeric(SES)>4, 4, as.numeric(SES))),
`M/F`=as.numeric(factor(`M/F`)))
data$`M/F`
x_var
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
train(x=train_data[x_var], y=train_data[[y_var]],
method="qda")
x_var
train_data$`M/F`
train_data$EDUC
train_data$SES
train_data$MMSE
data=oasis_data %>%
mutate(SES=as.numeric(factor(ifelse(as.numeric(SES)>4, 4, as.numeric(SES)))),
`M/F`=as.numeric(factor(`M/F`)))
data$SES
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
model_fit <- train(x=train_data[x_var], y=train_data[[y_var]],
method="qda")
train_test_fn_class <-
function(data=oasis_data %>%
mutate(SES=factor(ifelse(as.numeric(SES)>4, 4, as.numeric(SES))),
`M/F`=factor(`M/F`)),
y_var="CDR",
x_var=names(oasis_data %>%
select(-c("Subject ID", "MRI ID", "Group", "CDR",
"MR Delay", "Visit", "Hand"))),
method,
k_folds=10){
# Create model formula
model_fmrla <- as.formula(paste0("`", y_var, "` ~", paste0("`", x_var, "`", collapse="+")))
# Create partitions
tt_indices <- createFolds(y=data[[y_var]], k=k_folds)
# CV train and test
cv_results <- list()
for(i in 1:k_folds){
train_data <- data[-tt_indices[[i]],]
test_data <- data[tt_indices[[i]],]
# Train
if(method=="logreg"){
model_fit <- glm(model_fmrla, data=train_data, family=binomial)
}
if(method=="knn"){
tune_model <- train(model_fmrla, data=train_data,
method=method,
tuneLength=10)
model_fit <- tune_model
}
if(method=="qda"){
train_data <- train_data %>%
mutate(SES=as.numeric(SES), `M/F`=as.numeric(`M/F`))
test_data <- test_data %>%
mutate(SES=as.numeric(SES), `M/F`=as.numeric(`M/F`))
model_fit <- train(x=train_data[x_var], y=train_data[[y_var]],
method="qda")
}
# Test
test_data$predicted <-
if(method=="logreg"){
factor(ifelse(predict(model_fit, newdata=test_data, type="response")>0.5,
"1+", "0"))
}else{
predict(model_fit, newdata=test_data, type="raw")
}
# Report metrics
cv_results[[i]] <- confusionMatrix(test_data$predicted,
test_data[[y_var]], positive = "1+")$byClass
}
# Zip everything together to return
cv_results_all <- do.call("rbind", cv_results)
return(cv_results_all)
}
# Run analysis using function
methods <- c("logreg", "knn", "qda")
analysis_all <- list()
i=1
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
i=2
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
analysis_all
i=3
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd),
"method"=methods[i])
analysis_all
analysis_all <- list()
for(i in 1:length(methods)){
analysis_all[[i]] <- data.frame("cv_est"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=mean, na.rm=TRUE),
"cv_se"=apply(train_test_fn_class(method=methods[i]),
MARGIN=2, FUN=sd, na.rm=TRUE),
"method"=methods[i])
}
do.call("rbind", analysis_all)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(factoextra)
library(gtsummary)
library(flextable)
library(pROC)
#Create datasets
train_y <- read_csv("data/actual.csv")[1:38,]
test_y <- read_csv("data/actual.csv")[39:72,]
#train_x
train_x <- read.csv("data/data_set_ALL_AML_train.csv") %>%
subset(select = -c(Gene.Description)) %>%
drop_na()
train_x <- train_x[,-grep("call", colnames(train_x))]
names <- c("ID", train_x$Gene.Accession.Number)
train_x <- cbind(as.numeric(str_remove(colnames(train_x),"X")[-1]),as.data.frame(t(x = train_x[-1])))
colnames(train_x) <- names
train_x <- train_x[order(train_x$ID),]
row.names(train_x) <- NULL
#test_x
test_x <- read.csv("data/data_set_ALL_AML_independent.csv") %>%
subset(select = -c(Gene.Description)) %>%
drop_na()
test_x <- test_x[,-grep("call", colnames(test_x))]
names <- c("ID", test_x$Gene.Accession.Number)
test_x <- cbind(as.numeric(str_remove(colnames(test_x),"X")[-1]),as.data.frame(t(x = test_x[-1])))
colnames(test_x) <- names
test_x <- test_x[order(test_x$ID),]
row.names(test_x) <- NULL
#PCA
pca_train <- prcomp(train_x[,-1], scale. = T)
#Srcee plot
fviz_eig(pca_train)
#PC scores
pc_train_scores <- pca_train$x
fviz_pca_ind(pca_train,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
#Second PC plot
fviz_pca_ind(pca_train,
col.ind = train_y$cancer,
palette = c("#0072B2", "#D55E00", "#CC79A7"),
addEllipses = TRUE,
ellipse.type = "confidence",
legend.title = "Diagnosis",
label = "none",
repel = TRUE)
#Summary Statistics
data.frame(pc_train_scores[,1:2], cancer = train_y$cancer) %>%
tbl_summary(by = cancer,
statistic = list(all_continuous() ~ "{mean} ({sd})")) %>%
add_n() %>%
add_p(test = all_continuous() ~ "aov") %>%
as_flex_table() %>%
colformat_num(digits = 3) %>%
bold(i = 1, part = 'header')
#Run k-means
kmeansAICBIC = function(fit){
m = ncol(fit$centers)
n = length(fit$cluster)
k = nrow(fit$centers)
D = fit$tot.withinss
return(data.frame(AIC = D + 2*m*k,
BIC = D + log(n)*m*k))
}
clus <- list()
aic_bic <- list()
clus_num <- c()
train_x_norm <- scale(train_x)
for(j in 1:8){
clus[[j]] <-
kmeans(x = train_x_norm,centers = j, nstart = 10)
aic_bic[[j]] <- kmeansAICBIC(clus[[j]])
clus_num[j] <- j
}
clus_total_all_criterion <- data.frame("no_of_clus" = clus_num,
do.call("rbind", aic_bic))
# Find min. BIC
clus_min_bic <- which(clus_total_all_criterion$BIC==min(clus_total_all_criterion$BIC))
#Plot BIC
ggplot(data=clus_total_all_criterion, mapping=aes(x=no_of_clus,
y=BIC))+
geom_point()+
geom_line()+
geom_hline(yintercept = clus_total_all_criterion$BIC[clus_min_bic],
linetype="dashed", color="red")+
geom_vline(xintercept = clus_total_all_criterion$no_of_clus[clus_min_bic],
linetype="dashed", color="red")+
theme_bw()
#Add in clusters
train_x_clus <- data.frame(train_x,
"clus"=factor(clus[[clus_min_bic]]$cluster),
pc_train_scores,
diag = train_y$cancer)
#Recreate 1B plot
fviz_pca_ind(pca_train,
col.ind = train_x_clus$clus,
palette = c("#0072B2", "#D55E00", "#CC79A7"),
addEllipses = TRUE,
ellipse.type = "confidence",
legend.title = "Diagnosis",
label = "none",
repel = TRUE)
knn_train_x <- data.frame(pc_train_scores, cancer = train_y$cancer)
knn_fit <- train(cancer ~ ., data = knn_train_x, method = "knn",
tuneLength = 10,
preProcess = c("scale", "center"))
#Get pc scores for test_x
pc_test_scores <- predict(pca_train, newdata = test_x)
knn_test_x <- data.frame(pc_test_scores, cancer = test_y$cancer)
#Predict on test set
knn_test_x$knn_prob_cancer <- predict(knn_fit, newdata = knn_test_x, type = "prob")
knn_test_x$knn_prob_cancer
predict(knn_fit, newdata = knn_test_x, type = "prob")$AML
knn_test_x$knn_prob_cancer <- predict(knn_fit, newdata = knn_test_x, type = "prob")$AML
knn_fit$bestTune
knn_fit$results
knn_test_x$knn_prob_cancer <- predict(knn_fit, newdata = knn_test_x, type = "prob")$AML
roc_knn <- roc(response = knn_test_x$knn_prob_cancer, predictor = knn_test_x$cancer)
roc_knn <- roc(predictor = knn_test_x$knn_prob_cancer, response = knn_test_x$cancer)
roc_knn
ggroc(roc_knn)
knn_test_x$cancer
confusionMatrix(knn_test_x$knn_cancer , as.factor(knn_test_x$cancer), positive = "AML")
knn_test_x$knn_cancer
factor(ifelse(knn_prob_cancer>0.5, "AML", "ALL"))
knn_test_x$knn_prob_cancer <- predict(knn_fit, newdata = knn_test_x, type = "prob")$AML
knn_test_x$knn_cancer <- factor(ifelse(knn_test_x$knn_prob_cancer>0.5, "AML", "ALL"))
knn_test_x$knn_cancer
confusionMatrix(knn_test_x$knn_cancer , as.factor(knn_test_x$cancer), positive = "AML")
roc_knn <- roc(predictor = knn_test_x$knn_prob_cancer, response = knn_test_x$cancer)
ggroc(roc_knn)
