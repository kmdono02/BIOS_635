library(tidyverse)
library(pROC)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
library(tidyverse)
library(caret)
library(pROC)
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
freq(train_data$asd_group, order="freq", totals = FALSE, cumul =FALSE)
freq(test_data$asd_group, order="freq", totals = FALSE, cumul =FALSE)
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
freq(train_smote$asd_group, order="freq", totals = FALSE, cumul =FALSE)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data)
# Confusion matrix
confusionMatrix(data=test_predict, reference=test_data$asd_group)
# Try changing prob threshold using ROC
test_roc[[i]] <- roc(predictor=predict(rf_fit, newdata=test_data, type="prob")[,1],
response=test_data$asd_group)
}
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
freq(train_data$asd_group, order="freq", totals = FALSE, cumul =FALSE)
freq(test_data$asd_group, order="freq", totals = FALSE, cumul =FALSE)
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data)
# Confusion matrix
confusionMatrix(data=test_predict, reference=test_data$asd_group)
# Try changing prob threshold using ROC
test_roc[[i]] <- roc(predictor=predict(rf_fit, newdata=test_data, type="prob")[,1],
response=test_data$asd_group)
}
library(tidyverse)
library(caret)
library(pROC)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
ibis_data <- data.frame(lapply(ibis_data, as.factor))
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data)
# Confusion matrix
confusionMatrix(data=test_predict, reference=test_data$asd_group)
# Try changing prob threshold using ROC
test_roc[[i]] <- roc(predictor=predict(rf_fit, newdata=test_data, type="prob")[,1],
response=test_data$asd_group)
}
library(tidyverse)
library(caret)
library(DMwR)
library(pROC)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
ibis_data <- data.frame(lapply(ibis_data, as.factor))
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data)
# Confusion matrix
confusionMatrix(data=test_predict, reference=test_data$asd_group)
# Try changing prob threshold using ROC
test_roc[[i]] <- roc(predictor=predict(rf_fit, newdata=test_data, type="prob")[,1],
response=test_data$asd_group)
}
library(cutpointr)
install.packages("cutpointr")
library(cutpointr)
predictions_100_samples <- data.frame(
Sample = rep(c(1:100), times = 195),
PredictionValues = c(rnorm(n = 9750), rnorm(n = 9750, mean = 1)),
RealClass = c(rep("benign", times = 9750), rep("pathogenic", times = 9750))
)
View(predictions_100_samples)
library(tidyverse)
library(caret)
library(DMwR)
library(pROC)
library(cutpointr)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
ibis_data <- data.frame(lapply(ibis_data, as.factor))
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
i=1
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
# Confusion matrix
confusionMatrix(data=test_predict, reference=test_data$asd_group)
test_roc[[i]] <- data.frame(test_data$asd_group, test_predict[1,])
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
test_predict
test_predict$HR_ASD
data.frame(test_data$asd_group, test_predict$HR_ASD)
data.frame(test_data$asd_group, test_predict$HR_ASD)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
ibis_data <- data.frame(lapply(ibis_data, as.factor))
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
test_roc[[i]] <- data.frame("asd_group"=test_data$asd_group,
"prob"=test_predict$HR_ASD,
"obs"=1:dim(test_predict)[1])
}
all_test_data <- do.call("rbind", test_roc)
View(all_test_data)
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
test_roc[[i]] <- data.frame("asd_group"=test_data$asd_group,
"prob"=test_predict$HR_ASD,
"fold"=i)
}
all_test_data <- do.call("rbind", test_roc)
all_test_data <- do.call("rbind", test_roc)
mean_roc <- function(data, cutoffs = seq(from = 0, to = 0.01, by = 1)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = fold, class = asd_group,
subgroup = fold, method = oc_manual, cutpoint = cp,
pos_class = "HR_ASD", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mr <- mean_roc(all_test_data)
View(mr)
seq(from = 0, to = 0.01, by = 1)
mean_roc <- function(data, cutoffs = seq(from = 0, to = 1, by = 0.011)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = fold, class = asd_group,
subgroup = fold, method = oc_manual, cutpoint = cp,
pos_class = "HR_ASD", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mr <- mean_roc(all_test_data)
?cutpointr
all_test_data <- do.call("rbind", test_roc)
# Compute mean roc curve
mean_roc <- function(data, cutoffs = seq(from = 0, to = 1, by = 0.011)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = prob, class = asd_group,
subgroup = fold, method = oc_manual, cutpoint = cp,
pos_class = "HR_ASD", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mr <- mean_roc(all_test_data)
ggplot(mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_step() + geom_point() +
theme(aspect.ratio = 1)
ggplot(mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_step() +
theme(aspect.ratio = 1)
ggplot(mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_step() +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(aspect.ratio = 1)
ggplot(mr, aes(x = 1 - specificity, y = sensitivity)) +
plot_roc(data=all_test_data, aes(color=fold)) +
geom_step() +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(aspect.ratio = 1)
all_test_data
?plot_roc
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc() +
geom_step(data=mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(aspect.ratio = 1)
all_test_data$fold
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=")
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_step(data=mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(legend.position="none",
aspect.ratio = 1)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_line(data=mr, aes(x = 1 - specificity, y = sensitivity))
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F)
mr
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_line(data=mr, aes(x = 1 - specificity, y = sensitivity, subgroup=NULL)) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(legend.position="none",
aspect.ratio = 1)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F)
geom_line(data=mr, aes(x = 1 - specificity, y = sensitivity, subgroup=NULL)) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(legend.position="none",
aspect.ratio = 1)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed")
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
geom_line(data=mr, aes(x = 1 - specificity, y = sensitivity))
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
geom_line(data=mr, aes(x = 1 - specificity, y = sensitivity), inherit.aes = FALSE) +
theme(legend.position="none",
aspect.ratio = 1)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
geom_step(data=mr, aes(x = 1 - specificity, y = sensitivity), inherit.aes = FALSE) +
theme(legend.position="none",
aspect.ratio = 1)
ggsave("roc_example.jpg", scale=2, limitsize = FALSE)
library(tidyverse)
library(caret)
library(DMwR)
library(pROC)
library(cutpointr)
ibis_data <- read_csv("../data/fyi_data.CSV") %>%
filter(grepl("HR", `HR ASD versus HR_Neg`)) %>%
mutate(asd_group = factor(ifelse(Groups=="HR_ASD", "HR_ASD", "HR_Neg"))) %>%
select(FYIq_1:FYIq_60, asd_group)
ibis_data <- data.frame(lapply(ibis_data, as.factor))
test_roc <- list()
k=5
tt_indices <- createFolds(y=ibis_data$asd_group, k=k)
i=1
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
for(i in 1:k){
train_data <- ibis_data[tt_indices[[i]],]
test_data <- ibis_data[-tt_indices[[i]],]
# SMOTE training set AFTER creating train and test sets
train_smote <- SMOTE(asd_group~., data=train_data, perc.under = 150)
# Use random forest for example
rf_fit <- train(asd_group~., data = train_smote,
method = "rf",
trControl=trainControl(method="cv", number=2))
test_predict <- predict(rf_fit, newdata = test_data, type="prob")
test_roc[[i]] <- data.frame("asd_group"=test_data$asd_group,
"prob"=test_predict$HR_ASD,
"fold"=i)
}
all_test_data <- do.call("rbind", test_roc)
mean_roc <- function(data, cutoffs = seq(from = 0, to = 1, by = 0.01)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = prob, class = asd_group,
subgroup = fold, method = oc_manual, cutpoint = cp,
pos_class = "HR_ASD", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mr <- mean_roc(all_test_data)
ggplot(data=mr, aes(x = 1 - specificity, y = sensitivity)) +
geom_step() +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
theme(aspect.ratio = 1)
cutpointr(data = all_test_data, x = prob, class = asd_group,
subgroup = fold,
pos_class = "HR_ASD", direction = ">=") %>%
plot_roc(display_cutpoint = F) +
geom_abline(mapping=aes(intercept=0, slope=1), linetype="dashed") +
geom_step(data=mr, aes(x = 1 - specificity, y = sensitivity), inherit.aes = FALSE) +
theme(legend.position="none",
aspect.ratio = 1)
