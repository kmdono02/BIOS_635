knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(mgcv)
library(splines)
library(ISLR)
library(caret)
wage_data <- Wage # contained in ISLR package
# Holdout 40% for tesing
tt_indicies <- createDataPartition(y=wage_data_edit$wage, p=0.6, list = FALSE)
wage_data <- Wage # contained in ISLR package
# Holdout 40% for tesing
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
# Look at datasets
wage_data_train
wage_data_test
library(tidyverse)
library(mgcv)
library(splines)
library(ISLR)
library(caret)
library(rmarkdown)
wage_data <- Wage # contained in ISLR package
# Holdout 40% for tesing
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
# Look at datasets
paged_table(wage_data_train)
paged_table(wage_data_test)
## Set degrees being considered:
degrees <- 1:20
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree without data splitting")
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
error_rates_degrees <- list()
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[i]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE),
linetype="dashed", color="red")+
geom_vline(xintercept =
which(error_rates_degrees_df$RMSE==min(error_rates_degrees_df$RMSE)),
linetype="dashed", color="red")+
labs(title="RMSE (Root Mean Squared Error) by degree on test set")+
theme_bw()
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 20 # Look at 20 different 60:40 splits
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE, color=split_trial))+
geom_point()+
geom_line()
error_rates_degrees_df$split_trial
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE, color=split_trial))+
geom_point()
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=split_trial))+
geom_point()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=split_trial))+
geom_point()+
geom_line()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=factor(split_trial)))+
geom_point()+
geom_line()
## Set degrees being considered:
degrees <- 1:20
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree without data splitting")
# Line continuously decreases, though seems improvement after 3 or 4 is minimal
# For better assessment, split into training (60:40 split for ex)
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 20 # Look at 20 different 60:40 splits
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=factor(split_trial)))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE),
linetype="dashed", color="red")+
geom_vline(xintercept =
which(error_rates_degrees_df$RMSE==min(error_rates_degrees_df$RMSE)),
linetype="dashed", color="red")+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
?sample
wage_data_subset <- wage_data[sample(1:dim(wage_data)[1], size=400, replace=FALSE),]
dim(wage_data_subset)
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
wage_data_subset <- wage_data[sample(1:dim(wage_data)[1], size=400, replace=FALSE),]
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data_subset$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data_subset[tt_indicies,]
wage_data_test <- wage_data_subset[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
degrees
degrees[i]
dim(wage_data_train)
degrees <- 1:10
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree without data splitting")
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
wage_data_subset <- wage_data[sample(1:dim(wage_data)[1], size=400, replace=FALSE),]
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data_subset$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data_subset[tt_indicies,]
wage_data_test <- wage_data_subset[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=RMSE, color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=log(RMSE), color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
?createDataPartition
cv_folds <- createFolds(y=wage_data$wage, k=5)
cv_folds
cv_folds <- createFolds(y=wage_data_subset$wage, k=5)
cv_folds$Fold1
# 5 fold CV partitions
cv_folds <- createFolds(y=wage_data_subset$wage, k=5)
# Can see whose in fold 1
cv_folds$Fold1
# Look at dataset for fold 1
wage_data_fold_1 <- wage_data_subset[cv_folds$Fold1,]
paged_table(wage_data_fold_1)
tt_indicies <- createFolds(y=wage_data_subset$wage, k=5)
tt_indicies[[1]]
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
predict_wages <- list()
residuals_wages <- list()
rmse_poly_reg <- list()
mae_poly_reg <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
j=1
set.seed(j) # Set seed to get different splits
tt_indicies <- createFolds(y=wage_data_subset$wage, k=5)
i=1
for(f in 1:length(tt_indicies)){
wage_data_train <- wage_data_subset[tt_indicies[[f]],]
wage_data_test <- wage_data_subset[-tt_indicies[[f]],]
poly_reg_fit[[f]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages[[f]] <- predict(poly_reg_fit[[f]], newdata = wage_data_test)
residuals_wages[[f]] <- wage_data_test$wage-predict_wages
rmse_poly_reg[[f]] <- sqrt(mean(residuals_wages^2))
mae_poly_reg[[f]] <- mean(abs(residuals_wages))
}
f
poly_reg_fit <- list()
predict_wages <- list()
residuals_wages <- list()
rmse_poly_reg <- list()
mae_poly_reg <- list()
error_rates_degrees <- list()
wage_data_train <- wage_data_subset[tt_indicies[[f]],]
wage_data_test <- wage_data_subset[-tt_indicies[[f]],]
poly_reg_fit[[f]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict(poly_reg_fit[[f]], newdata = wage_data_test)
for(f in 1:length(tt_indicies)){
wage_data_train <- wage_data_subset[tt_indicies[[f]],]
wage_data_test <- wage_data_subset[-tt_indicies[[f]],]
poly_reg_fit[[f]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages[[f]] <- predict(poly_reg_fit[[f]], newdata = wage_data_test)
residuals_wages[[f]] <- wage_data_test$wage-predict_wages[[f]]
rmse_poly_reg[[f]] <- sqrt(mean(residuals_wages[[f]]^2))
mae_poly_reg[[f]] <- mean(abs(residuals_wages[[f]]))
}
rmse_poly_reg
data.frame("RMSE"=mean(unlist(rmse_poly_reg)),
"MAE"=mean(unlist(mae_poly_reg)),
"degree"=degrees[i],
"split_trial"=j)
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
predict_wages <- list()
residuals_wages <- list()
rmse_poly_reg <- list()
mae_poly_reg <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createFolds(y=wage_data_subset$wage, k=5)
for(i in 1:length(degrees)){
for(f in 1:length(tt_indicies)){
wage_data_train <- wage_data_subset[tt_indicies[[f]],]
wage_data_test <- wage_data_subset[-tt_indicies[[f]],]
poly_reg_fit[[f]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages[[f]] <- predict(poly_reg_fit[[f]], newdata = wage_data_test)
residuals_wages[[f]] <- wage_data_test$wage-predict_wages[[f]]
rmse_poly_reg[[f]] <- sqrt(mean(residuals_wages[[f]]^2))
mae_poly_reg[[f]] <- mean(abs(residuals_wages[[f]]))
}
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=mean(unlist(rmse_poly_reg)),
"MAE"=mean(unlist(mae_poly_reg)),
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=log(RMSE), color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
