knitr::opts_chunk$set(message = FALSE, warning = FALSE)
cancer_data_reg <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -Geography, -binnedInc) %>%
drop_na()
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(rpart)
library(randomForest)
library(e1071)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(rpart)
library(randomForest)
library(e1071)
cancer_data_reg <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -Geography, -binnedInc) %>%
drop_na()
heart_disease_data <- read_csv("../data/heart_disease/Correct_Dataset.csv",
na = c("", "NA", "?"))  %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No")) %>%
select(-X1, -Target) %>%
drop_na()
set.seed(12)
fetal_health_data <- read.csv("../data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(rpart)
library(randomForest)
library(e1071)
library(DMwR)
cancer_data_reg <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -Geography, -binnedInc) %>%
drop_na()
heart_disease_data <- read_csv("../data/heart_disease/Correct_Dataset.csv",
na = c("", "NA", "?"))  %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No")) %>%
select(-X1, -Target) %>%
drop_na()
set.seed(12)
fetal_health_data <- read.csv("../data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
x <- c(1,2,3)
x
x[1]
x[c(1,3)]
x <- c(1,2,"a")
x
x <- list(c(1,2,3), c(4,5,6))
x
[1]
x[1]
x[[1]]
x[1]
x[[1]]
x[c(1,2)]
typeof(cancer_data_reg)
cancer_data_reg[1]
cancer_data_reg[[1]]
cancer_data_reg$TARGET_deathRate
# Objects can be dynamically expanded inside loops
x <- list()
y <- c()
x
y
for(i in 1:10){
x[[i]] <- i
y[i] <- i
}
x
y
x
names(x)
names(x) <- c("a", "b", "c")
x
x$a
names(cancer_data_reg)
x <- list()
for(i in 1:10){
print(i)
}
i=1
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
}
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
}
i=2
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
}
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
}
}
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
}
}
x
counter <- 1
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
x[[counter]] <- i+j
counter <- counter+1
}
}
x
x <- list()
counter <- 1
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
x[[j]] <- i+j
counter <- counter+1
}
}
x
counter <- 1
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
x[[counter]] <- i+j
counter <- counter+1
}
}
i
j
x <- list()
counter <- 1
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
x[[counter]] <- i+j
counter <- counter+1
}
}
x
x <- list()
counter <- 1
for(i in 1:10){
paste0("i = ", i)
for(j in 1:10){
paste0("j = ", j)
x[[counter]] <- i+j
counter <- counter+1
}
}
# Suppose we want to run a KNN fitting method where we train, tune, test, and saved the results
rmse <- list()
tt_indices <- createFolds(y=cancer_data_reg$TARGET_deathRate, k=5)
for(i in 1:length(tt_indices)){
cancer_train <- cancer_data_reg[-tt_indices[[i]],]
cancer_test <- cancer_data_reg[tt_indices[[i]],]
# Train and tune KNN
algo_fit <- train(TARGET_deathRate~., data = cancer_train, preProcess = c("center", "scale"),
tuneLength = 10, trControl = trainControl(method="cv", number=5), method="knn")
# Test on fold
test_predict <- predict(algo_fit, newdata = cancer_test)
rmse[[i]] <- postResample(pred = test_predict, obs = cancer_test$TARGET_deathRate)
}
rmse
all_results <- do.call("rbind", rmse)
all_results
cv_estimate <- apply(all_results, 2, mean)
cv_se <- apply(all_results, 2, sd)
cv_estimate
cv_se
final_results <- c("cv_rmse"=cv_estimate, "cv_se"=cv_se)
final_results
data=cancer_data_reg
outcome="TARGET_deathRate"
k_train = 5
k_tune = 5
method="knn"
rmse <- list()
set.seed(seed)
tt_indices <- createFolds(y=data[[outcome]], k=k_train)
seed=12
rmse <- list()
set.seed(seed)
tt_indices <- createFolds(y=data[[outcome]], k=k_train)
tt_indices
i=1
data_train <- data[-tt_indices[[i]],]
data_test <- data[tt_indices[[i]],]
outcome
paste0(outcome, "~.")
as.formula(paste0(outcome, "~."))
method
k_tune
# Train and tune KNN
algo_fit <- train(as.formula(paste0(outcome, "~.")), data = data_train, preProcess = c("center", "scale"),
tuneLength = 10, trControl = trainControl(method="cv", number=k_tune), method=method)
test_predict <- predict(algo_fit, newdata = data_test)
rmse[[i]] <- postResample(pred = test_predict, obs = data_test[[outcome]])
for(i in 1:length(tt_indices)){
data_train <- data[-tt_indices[[i]],]
data_test <- data[tt_indices[[i]],]
# Train and tune KNN
algo_fit <- train(as.formula(paste0(outcome, "~.")), data = data_train, preProcess = c("center", "scale"),
tuneLength = 10, trControl = trainControl(method="cv", number=k_tune), method=method)
# Test on fold
test_predict <- predict(algo_fit, newdata = data_test)
rmse[[i]] <- postResample(pred = test_predict, obs = data_test[[outcome]])
}
all_results <- do.call("rbind", rmse)
cv_estimate <- apply(all_results, 2, mean)
cv_se <- apply(all_results, 2, sd)
final_results <- c("cv_rmse"=cv_estimate, "cv_se"=cv_se)
pred_analysis <- function(data, outcome, k_train, k_tune, method, seed=12){
rmse <- list()
set.seed(seed)
tt_indices <- createFolds(y=data[[outcome]], k=k_train)
for(i in 1:length(tt_indices)){
data_train <- data[-tt_indices[[i]],]
data_test <- data[tt_indices[[i]],]
# Train and tune KNN
algo_fit <- train(as.formula(paste0(outcome, "~.")), data = data_train, preProcess = c("center", "scale"),
tuneLength = 10, trControl = trainControl(method="cv", number=k_tune), method=method)
# Test on fold
test_predict <- predict(algo_fit, newdata = data_test)
rmse[[i]] <- postResample(pred = test_predict, obs = data_test[[outcome]])
}
all_results <- do.call("rbind", rmse)
cv_estimate <- apply(all_results, 2, mean)
cv_se <- apply(all_results, 2, sd)
final_results <- c("cv_rmse"=cv_estimate, "cv_se"=cv_se)
# final_results <- list(c("cv_rmse"=cv_estimate, "cv_se"=cv_se), bestTune = algo_fit$bestTune)
return(final_results)
}
pred_analysis(data=cancer_data_reg, outcome="TARGET_deathRate", k_train = 5, k_tune = 5, method="knn")
pred_analysis(data=cancer_data_reg, outcome="TARGET_deathRate", k_train = 5, k_tune = 5, method="rpart")
pred_analysis(data=cancer_data_reg, outcome="TARGET_deathRate", k_train = 5, k_tune = 5, method="glmnet")
pred_analysis <- function(data, outcome, k_train, k_tune, method, seed=12){
rmse <- list()
set.seed(seed)
tt_indices <- createFolds(y=data[[outcome]], k=k_train)
for(i in 1:length(tt_indices)){
data_train <- data[-tt_indices[[i]],]
data_test <- data[tt_indices[[i]],]
# Train and tune KNN
algo_fit <- train(as.formula(paste0(outcome, "~.")), data = data_train, preProcess = c("center", "scale"),
tuneLength = 10, trControl = trainControl(method="cv", number=k_tune), method=method)
# Test on fold
test_predict <- predict(algo_fit, newdata = data_test)
rmse[[i]] <- postResample(pred = test_predict, obs = data_test[[outcome]])
}
all_results <- do.call("rbind", rmse)
cv_estimate <- apply(all_results, 2, mean)
cv_se <- apply(all_results, 2, sd)
final_results <- c("cv_rmse"=cv_estimate, "cv_se"=cv_se)
final_results <- list(c("cv_rmse"=cv_estimate, "cv_se"=cv_se), bestTune = algo_fit$bestTune)
return(final_results)
}
pred_analysis(data=cancer_data_reg, outcome="TARGET_deathRate", k_train = 5, k_tune = 5, method="glmnet")
names(cancer_data_reg)
apply(cancer_data_reg, MARGIN=2, FUN=mean)
apply(cancer_data_reg, MARGIN=2, FUN=sd)
cancer_data_reg <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -Geography, -binnedInc)
apply(cancer_data_reg, MARGIN=2, FUN=mean)
apply(cancer_data_reg, MARGIN=2, FUN=mean, na.rm=TRUE)
lapply(cancer_data_reg, FUN=mean, na.rm=TRUE)
