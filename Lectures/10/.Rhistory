geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(mgcv)
library(splines)
library(ISLR)
library(caret)
library(rmarkdown)
wage_data <- Wage # contained in ISLR package
# Holdout 40% for tesing
tt_indicies <- createDataPartition(y=wage_data$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
# Look at datasets
paged_table(wage_data_train)
paged_table(wage_data_test)
## Set degrees being considered:
degrees <- 1:10
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree without data splitting")
# Line continuously decreases, though seems improvement after 3 or 4 is minimal
# For better assessment, split into training (60:40 split for ex)
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
wage_data_subset <- wage_data[sample(1:dim(wage_data)[1], size=400, replace=FALSE),]
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createDataPartition(y=wage_data_subset$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data_subset[tt_indicies,]
wage_data_test <- wage_data_subset[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[counter]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[counter]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=log(RMSE), color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set\nBy split number")+
theme_bw()
# 5 fold CV partitions
cv_folds <- createFolds(y=wage_data_subset$wage, k=5)
# Can see whose in fold 1
cv_folds$Fold1
# Look at dataset for fold 1
wage_data_fold_1 <- wage_data_subset[cv_folds$Fold1,]
paged_table(wage_data_fold_1)
# Fit model for each degree considered, compute RMSE (on training in this ex.)
poly_reg_fit <- list()
predict_wages <- list()
residuals_wages <- list()
rmse_poly_reg <- list()
mae_poly_reg <- list()
error_rates_degrees <- list()
counter <- 1
trials <- 10 # Look at 10 different 60:40 splits
for(j in 1:trials){
set.seed(j) # Set seed to get different splits
tt_indicies <- createFolds(y=wage_data_subset$wage, k=5)
for(i in 1:length(degrees)){
for(f in 1:length(tt_indicies)){
wage_data_train <- wage_data_subset[tt_indicies[[f]],]
wage_data_test <- wage_data_subset[-tt_indicies[[f]],]
poly_reg_fit[[f]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages[[f]] <- predict(poly_reg_fit[[f]], newdata = wage_data_test)
residuals_wages[[f]] <- wage_data_test$wage-predict_wages[[f]]
rmse_poly_reg[[f]] <- sqrt(mean(residuals_wages[[f]]^2))
mae_poly_reg[[f]] <- mean(abs(residuals_wages[[f]]))
}
# Save in data frame
error_rates_degrees[[counter]] <-
data.frame("RMSE"=mean(unlist(rmse_poly_reg)),
"MAE"=mean(unlist(mae_poly_reg)),
"degree"=degrees[i],
"split_trial"=j)
counter <- counter+1
}
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
# Plot results as function of degree
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degree, y=log(RMSE), color=factor(split_trial)))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree using 5-fold CV\nBy split number")+
theme_bw()
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
tt_indicies <- createFolds(y=heart_data$target, k=5)
tt_indicies <- createFolds(y=heart_data$heart_disease, k=5)
tt_indicies
f=1
heart_data_train <- heart_data[tt_indicies[[f]],]
heart_data_test <- heart_data[-tt_indicies[[f]],]
lda_fit[[f]] <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+
Colestrol+MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
lda_fit <- list()
estimted_probs <- list()
lda_fit[[f]] <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+
Colestrol+MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
estimted_probs[[f]] <- predict(poly_reg_fit[[f]], newdata = wage_data_test)
accuracy_rates <- list()
pred_heart_disease <-
relevel(factor(ifelse(estimted_probs[[f]]>0.5,
"Yes", "No")), ref = "No")
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")
pred_heart_disease
lenth(pred_heart_disease)
length(pred_heart_disease)
length(heart_data_test$heart_disease)
dim(heart_data_test)
dim(heart_data_train)
heart_data_train <- heart_data[-tt_indicies[[f]],]
heart_data_test <- heart_data[tt_indicies[[f]],]
lda_fit[[f]] <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+
Colestrol+MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
estimted_probs[[f]] <- predict(lda_fit[[f]], newdata=heart_data_test, type = "prob")$Yes
length(estimted_probs[[f]])
pred_heart_disease <-
relevel(factor(ifelse(estimted_probs[[f]]>0.5,
"Yes", "No")), ref = "No")
# Get accuracy rates from output
accuracy_rates[[f]] <- confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")
accuracy_rates[[f]]
accuracy_rates[[f]]$table
accuracy_rates[[f]]$byClass
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass
data.frame(confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass)
accuracy_rates[[f]]$overall
c(confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass,
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$overall,
"fold"=f)
accuracy_rates[[f]] <-
c(confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass,
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$overall,
"fold"=f)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
# Create lists to hold results
lda_fit <- list()
estimted_probs <- list()
accuracy_rates <- list()
# Create 5 folds
tt_indicies <- createFolds(y=heart_data$heart_disease, k=5)
# Run LDA for each fold, store results
for(f in 1:length(tt_indicies)){
heart_data_train <- heart_data[-tt_indicies[[f]],]
heart_data_test <- heart_data[tt_indicies[[f]],]
lda_fit[[f]] <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+
Colestrol+MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
estimted_probs[[f]] <- predict(lda_fit[[f]], newdata=heart_data_test, type = "prob")$Yes
pred_heart_disease <-
relevel(factor(ifelse(estimted_probs[[f]]>0.5,
"Yes", "No")), ref = "No")
# Get accuracy rates from output
accuracy_rates[[f]] <-
c(confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass,
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$overall,
"fold"=f)
}
do.call("rbind", accuracy_rates)
data.frame(do.call("rbind", accuracy_rates))
accuracy_df <- data.frame(do.call("rbind", accuracy_rates))
CV_ests <- accuracy_df %>% select(-fold) %>% apply(MARGIN = 2, FUN=mean)
CV_ests
View(CV_ests)
CV_ests <- accuracy_df %>% select(-fold) %>% lapply(MARGIN = 2, FUN=mean)
View(CV_ests)
CV_se <- accuracy_df %>% select(-fold) %>% apply(MARGIN = 2, FUN=sd)
CV_se
CV_mean
CV_mean <- accuracy_df %>% select(-fold) %>% apply(MARGIN = 2, FUN=mean)
CV_mean
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
# Create lists to hold results
lda_fit <- list()
estimted_probs <- list()
accuracy_rates <- list()
# Create 5 folds
tt_indicies <- createFolds(y=heart_data$heart_disease, k=5)
# Run LDA for each fold, store results
for(f in 1:length(tt_indicies)){
heart_data_train <- heart_data[-tt_indicies[[f]],]
heart_data_test <- heart_data[tt_indicies[[f]],]
lda_fit[[f]] <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+
Colestrol+MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
estimted_probs[[f]] <- predict(lda_fit[[f]], newdata=heart_data_test, type = "prob")$Yes
pred_heart_disease <-
relevel(factor(ifelse(estimted_probs[[f]]>0.5,
"Yes", "No")), ref = "No")
# Get accuracy rates from output
accuracy_rates[[f]] <-
c(confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$byClass,
confusionMatrix(pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")$overall,
"fold"=f)
}
accuracy_df <- data.frame(do.call("rbind", accuracy_rates))
# Compute mean and SE for each measure to get CV mean/SE
CV_mean <- accuracy_df %>% select(-fold) %>% apply(MARGIN = 2, FUN=mean)
CV_se <- accuracy_df %>% select(-fold) %>% apply(MARGIN = 2, FUN=sd)
CV_mean
CV_se
CV_mean <- accuracy_df %>%
select(Sensitivity, Specificity, `Pos.Pred.Value`, `Neg.Pred.Value`, Accuracy) %>%
apply(MARGIN = 2, FUN=mean)
CV_mean
f=1
tt_indicies[[f]]
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
samples <- 100
boots <- 1000
n <- 100
mu <- 0
sigma <- 1
mu_hat_per_sample <- rep(NA, samples)
mu_hat_boot <- rep(NA, boots)
for(i in 1:samples){
set.seed(i)
x <- rnorm(n, mu, sigma)
mu_hat_per_sample[i] <- mean(x)
}
hist(mu_hat_per_sample)
samples <- 1000
boots <- 1000
n <- 100
mu <- 0
sigma <- 1
mu_hat_per_sample <- rep(NA, samples)
mu_hat_boot <- rep(NA, boots)
for(i in 1:samples){
set.seed(i)
x <- rnorm(n, mu, sigma)
mu_hat_per_sample[i] <- mean(x)
}
hist(mu_hat_per_sample)
hist(mu_hat_per_sample,
xlab = "Sample mean across samples",
main = "Approx. of sample mean distribution")
sample(1:n, n, replace = TRUE)
set.seed(1)
x <- rnorm(n, mu, sigma)
samples <- 1000
boots <- 1000
n <- 100
mu <- 0
sigma <- 1
mu_hat_per_sample <- rep(NA, samples)
mu_hat_boot <- rep(NA, boots)
for(i in 1:samples){
set.seed(i)
x <- rnorm(n, mu, sigma)
mu_hat_per_sample[i] <- mean(x)
}
hist(mu_hat_per_sample,
xlab = "Sample mean across samples",
main = "Approx. of sample mean distribution")
# Generate bootstrap distribution from single sample
set.seed(1)
x <- rnorm(n, mu, sigma)
for(i in 1:boots){
# Generate indices for bootstrap sample
set.seed(i)
boot_index <- sample(1:n, n, replace = TRUE)
x_boot <- x[boot_index]
mu_hat_boot[i] <- mean(x_boot)
}
hist(mu_hat_boot,
xlab = "Sample mean across bootstrap samples",
main = "Bootstrap sample mean distribution")
summary(mu_hat_boot)
?summary
hist(mu_hat_boot,
xlab = "Sample mean across bootstrap samples",
main = paste0("Bootstrap sample mean distribution\nMean=",
round(mean(mu_hat_boot),2), ", SD=",
round(sd(mu_hat_boot, 2))))
hist(mu_hat_boot,
xlab = "Sample mean across bootstrap samples",
main = paste0("Bootstrap sample mean distribution\nMean=",
round(mean(mu_hat_boot),2), ", SD=",
round(sd(mu_hat_boot), 2)))
sd(mu_hat_boot)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(mgcv)
library(splines)
library(ISLR)
library(caret)
library(rmarkdown)
cancer_data <- read_csv("../data/cancer_reg.csv")
names(cancer_data)
cancer_data <- read_csv("../data/cancer_reg.csv")
cancer_data <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate)
?train
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="glmStepAIC")
summary(cancer_data)
cancer_data <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -binnedInc) %>%
drop_na()
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="glmStepAIC")
names(cancer_data)
cancer_data$Geography
cancer_data <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -binnedInc, -Geography) %>%
drop_na()
names(cancer_data)
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="glmStepAIC")
names(cancer_data)
cancer_data <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -binnedInc, -Geography) %>%
select(TARGET_deathRate, medIncome, povertyPercent, MedianAge:BirthRate) %>%
drop_na()
names(cancer_data)
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="glmStepAIC")
lm_stepwise
lm_stepwise$results
lm_stepwise$bestTune
lm_stepwise$results
lm_stepwise$finalModel
lm_stepwise$modelType
lm_stepwise$resample
lm_stepwise$modelInfo$parameters
lm_stepwise$modelInfo$loop
lm_stepwise$bestTune
lm_stepwise$modelInfo
lm_stepwise$pred
lm_stepwise$finalModel
lm_stepwise$finalModel$model
lm_stepwise$finalModel$model
lm_stepwise$finalModel$aic
lm_stepwise$finalModel
summary(lm_stepwise$finalModel)
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="lmStepAIC")
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="lmStepAIC",
trControl = trainControl(method = "cv"))
lm_stepwise
summary(lm_stepwise$finalModel)
varImp(lm_stepwise)
varImp(lm_stepwise)
?varImp
summary(lm_stepwise)
summary(lm_stepwise$finalModel)
varImp(lm_stepwise)
cancer_data <- read_csv("../data/cancer_reg.csv") %>%
select(-avgAnnCount, -avgDeathsPerYear, -incidenceRate, -binnedInc, -Geography) %>%
select(TARGET_deathRate, medIncome, povertyPercent, MedianAge:BirthRate) %>%
drop_na()
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="lmStepAIC",
trControl = trainControl(method = "cv"),
direction = "backward")
lm_stepwise
lm_stepwise
lm_stepwise$resample
colMeans(lm_stepwise$resample)
colMeans(lm_stepwise$resample[,1:3])
varImp(lm_stepwise)
lm_stepwise$resample
lm_stepwise
lm_stepwise$metric
lm_stepwise$resampledCM
lm_stepwise$finalModel
lm_stepwise$finalModel$tuneValue
lm_stepwise$finalModel$param
lm_stepwise$finalModel$coefficients
lm_stepwise$finalModel$anova
lm_stepwise$finalModel$model
lm_stepwise$finalModel$anova
lm_stepwise$finalModel$anova
lm_stepwise$resample
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="lmStepAIC",
tuneGrid=data.frame(nvmax=1:10),
trControl = trainControl(method = "cv"),
direction = "backward")
?train
View(train)
train
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="leapBackward",
trControl = trainControl(method = "cv"))
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="leapBackward",
trControl = trainControl(method = "cv"))
lm_stepwise
dim(cancer_data)[2]
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="leapBackward",
tuneGrid = data.frame(nvmax = 1:(dim(cancer_data)[2]-1)),
trControl = trainControl(method = "cv"))
lm_stepwise
lm_stepwise$resample
colMeans(lm_stepwise$resample[,1:3])
lm_stepwise$finalModel$anova
summary(lm_stepwise)
lm_stepwise
lm_stepwise$finalModel
lm_stepwise$results
lm_stepwise
lm_stepwise$resample
colMeans(lm_stepwise$resample[,1:3])
lm_stepwise
lm_stepwise$finalModel$anova
summary(lm_stepwise)
coef(step.model$finalModel, 15)
coef(lm_stepwise$finalModel, 15)
lm_stepwise <- train(TARGET_deathRate~., data=cancer_data,
method="lmStepAIC",
trControl = trainControl(method = "cv"))
lm_stepwise
lm_stepwise$resample
colMeans(lm_stepwise$resample[,1:3])
coef(lm_stepwise$finalModel, 15)
summary(lm_stepwise)
lm_stepwise$finalModel$anova
