knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(mgcv)
library(glmnet)
library(ISLR)
library(caret)
library(rmarkdown)
library(tidyverse)
library(mgcv)
library(glmnet)
library(ISLR)
library(caret)
library(rmarkdown)
library(GGally)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
names(brain_data)
grepl("V24", names(brain_data))
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V24", names(brain_data))])
names(brain_data)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V24", names(brain_data))]) %>%
select(CandID:Uncinate_R_V24)
names(brain_data)
dim(brain_data)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V24", names(brain_data))]) %>%
select(CandID:Uncinate_R_V24) %>%
drop_na()
dim(brain_data)
install.packages("factoextra")
library(factoextra)
names(brain_data)
prcomp
pca_brain <- prcomp(brain_data %>% select(EACSF_V24:Uncinate_R_V24) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
fviz_eig(res.pca)
fviz_eig(pca_brain)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V24) %>%
drop_na()
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>% select(EACSF_V24:Uncinate_R_V24) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V06", names(brain_data))]) %>%
select(CandID:Uncinate_R_V06) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>% select(EACSF_V06:Uncinate_R_V06) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
View(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame())
pca_brain$x
row.names(pca_brain$x)
cbind(pca_brain$x, "RiskGroup"=brain_data$RiskGroup)
pca_brain$x <- cbind(pca_brain$x, "RiskGroup"=brain_data$RiskGroup)
row.names(pca_brain$x) <- brain_data$CandID
pca_brain$x
fviz_eig(pca_brain)
fviz_pca_ind(pca_brain,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(pca_brain,
col.ind = "RiskGroup", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Plot 2 dimensional PCA results
fviz_pca_ind(pca_brain,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Add in diagnosis back
pca_brain$x <- cbind(pca_brain$x, "RiskGroup"=brain_data$RiskGroup)
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
viz_pca_ind(pca_brain,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(pca_brain,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Add in diagnosis back
pca_brain$x <- cbind(pca_brain$x,
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
pca_brain$x
data.frame(pca_brain$x)
dim(brain_data)
names(data.frame(pca_brain$x))
ggplot(data = data.frame(pca_brain$x),
mapping = aes(x=PC1, y=PC2))+
geom_point()
test <- data.frame(pca_brain$x)
test$PC1
?scale
data_for_plot <- scale(pca_brain$x)
pca_brain <- prcomp(brain_data %>% select(EACSF_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
data_for_plot <- scale(pca_brain$x)
data_for_plot
summary(data_for_plot)
data_for_plot <- scale(pca_brain$x)
# Add in diagnosis back
data_for_plot <- cbind(data_for_plot,
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2))+
geom_point()
data.frame(data_for_plot)
View(data.frame(data_for_plot))
data_for_plot <- cbind(as.numeric(data_for_plot),
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2))+
geom_point()
as.numeric(data_for_plot)
data_for_plot <- scale(pca_brain$x)
data_for_plot[,1]
View(data_for_plot)
data_for_plot <- scale(pca_brain$x)
# Add in diagnosis back
data_for_plot <- data.frame(data_for_plot,
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
data_for_plot <- data.frame(data_for_plot,
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2))+
geom_point()
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2))+
geom_point()+
theme_classic()
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2))+
geom_point()+
theme_bw()
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2, color=RiskGroup))+
geom_point()+
theme_bw()
?geom_hline
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2, color=RiskGroup))+
geom_point()+
geom_hline(yintercept=0)+
geom_vline(xintercept=0)+
theme_bw()
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2, color=RiskGroup))+
geom_point()+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0)+
theme_bw()
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2, color=RiskGroup))+
geom_point()+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
theme_bw()
fviz_pca_var(pca_brain,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
names(brain_data)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>%
select(LeftAmygdala_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
brain_data <- read_csv("../data/IBIS_brain_data_ex.csv")
brain_data <- brain_data %>%
select("CandID", "RiskGroup", names(brain_data)[grepl("V12", names(brain_data))]) %>%
select(CandID:Uncinate_R_V12) %>%
drop_na()
dim(brain_data)
# Run PCA on brain variables
pca_brain <- prcomp(brain_data %>%
select(PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
pca_brain <- prcomp(brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame(),
cor=TRUE, scores=TRUE)
# Scree plot
fviz_eig(pca_brain)
data_for_plot <- scale(pca_brain$x)
# Add in diagnosis back
data_for_plot <- data.frame(data_for_plot,
"RiskGroup"=brain_data$RiskGroup,
"CandID"=brain_data$CandID)
ggplot(data = data.frame(data_for_plot),
mapping = aes(x=PC1, y=PC2, color=RiskGroup))+
geom_point()+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
theme_bw()
install.packages("elasticnet")
library(elasticnet)
sparsepca_brain <- spca(x=brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame(),
use.corr=TRUE)
# Run sparse PCA on brain variables
sparsepca_brain <- spca(x=brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame(),
K=2,
use.corr=TRUE)
# Run sparse PCA on brain variables
sparsepca_brain <- spca(x=brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame(),
K=2,
sparse="penalty",
use.corr=TRUE)
spca_data <- brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame()
dim(spca_data)[2]
spca_data <- brain_data %>%
select(LeftAmygdala_V12, RightAmygdala_V12,
PreCG_L_V12:Uncinate_R_V12) %>% as.data.frame()
sparsepca_brain <- spca(x=spca_data,
K=2,
para = rep(1, dim(spca_data)[2]),
sparse="penalty",
use.corr=TRUE)
spca_data
summary(spca_data)
sparsepca_brain$loadings
sparsepca_brain <- spca(x=spca_data,
K=4,
para = rep(1, dim(spca_data)[2]),
sparse="penalty",
use.corr=TRUE)
sparsepca_brain$loadings
apply(X=sparsepca_brain$loadings, MARGIN=2, function(x){sum(x==0)})
