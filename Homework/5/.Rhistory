unlist()
names(per_class_accuracy)[l] <-
paste0("error_", levels(fetal_health_test$fetal_health_cat)[l])
}
# Add in trial number and method (60:40 split)
per_class_accuracy_6040_split <-
c(per_class_accuracy, "trial"=t, "method"="60_40_split")
################### Second, do 5-fold CV #########################
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=kfolds)
per_class_accuracy <- list()
# Do CV analysis for each fold
for(i in 1:length(individualfolds)){
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5)
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
# Save per-class accuracies from CV
per_class_accuracy[[i]] <-
rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(error = 1-sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <-
paste0("error_", levels(fetal_health_test$fetal_health_cat)[l])
}
}
# Bind together results from all K folds, take mean for estimate of accuracy
data_set_list_cv  <- do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
# Add in trial number and method (CV)
data_set_list_cv <- c(data_set_list_cv, "trial"=t,
"method"=paste0(kfolds, "_fold_CV"))
# Bind goether 60:40 split results and CV results for given trial
data_set_list_all[[t]] <-
data.frame(rbind(per_class_accuracy_6040_split, data_set_list_cv))
}
# Finally, bind together all results from all trials in dataset
data_set_list_all_trials <- do.call("rbind", data_set_list_all)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, include=TRUE,
fig.width = 10, fig.height = 5)
library(tidyverse)
library(broom)
library(gtsummary)
library(flextable)
library(gt)
library(caret)
library(GGally)
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
tbl_summary(data= fetal_health_data,
by=fetal_health_cat,
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations',
'prolongued_decelerations', 'abnormal_short_term_variability',
'mean_value_of_short_term_variability',
'mean_value_of_long_term_variability', 'fetal_health_cat'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~
"Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~
"Mean Value Of Long Term Variability",
fetal_health_cat ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = list(all_continuous() ~ "aov")) %>%
as_flex_table() %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
Table_1a
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
tbl_summary(data= fetal_health_data,
by=fetal_health_cat,
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations',
'prolongued_decelerations', 'abnormal_short_term_variability',
'mean_value_of_short_term_variability',
'mean_value_of_long_term_variability', 'fetal_health_cat'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~
"Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~
"Mean Value Of Long Term Variability",
fetal_health_cat ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = list(all_continuous() ~ "aov")) %>%
as_flex_table() %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
tbl_summary(data= fetal_health_data,
by=fetal_health_cat,
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations',
'prolongued_decelerations', 'abnormal_short_term_variability',
'mean_value_of_short_term_variability',
'mean_value_of_long_term_variability', 'fetal_health_cat'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~
"Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~
"Mean Value Of Long Term Variability",
fetal_health_cat ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = list(all_continuous() ~ "aov"))
tbl_summary(data= fetal_health_data,
by=fetal_health_cat,
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations',
'prolongued_decelerations', 'abnormal_short_term_variability',
'mean_value_of_short_term_variability',
'mean_value_of_long_term_variability', 'fetal_health_cat'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~
"Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~
"Mean Value Of Long Term Variability",
fetal_health_cat ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chi.square")) %>%
as_flex_table() %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
?add_p
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement,
uterine_contractions, light_decelerations, severe_decelerations,
prolongued_decelerations, abnormal_short_term_variability,
mean_value_of_short_term_variability, mean_value_of_long_term_variability,
fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
tbl_summary(data= fetal_health_data,
by=fetal_health_cat,
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations',
'prolongued_decelerations', 'abnormal_short_term_variability',
'mean_value_of_short_term_variability',
'mean_value_of_long_term_variability', 'fetal_health_cat'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~
"Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~
"Mean Value Of Long Term Variability",
fetal_health_cat ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chisq.test")) %>%
as_flex_table() %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
set.seed(12)
data_set_list_cv <- list()
data_set_list_all <- list()
predict_fetal <- list()
individualfolds <- list()
kfolds<-5
trials <- 100
# Outer loop: number of trials
for(t in 1:trials){
################### First, do 60:40 split analysis #########################
tt_indicies <- createDataPartition(y=fetal_health_data$fetal_health_cat, p=0.6,
list=FALSE)
fetal_health_train <- fetal_health_data[tt_indicies,]
fetal_health_test <- fetal_health_data[-tt_indicies,]
knn_train <- train(form=fetal_health_cat~., data=fetal_health_train,
method="knn",
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5)
fetal_health_test$pred_knn_fh <- predict(knn_train, newdata=fetal_health_test)
# Per-class accuracies from best tuning parameter-based KNN
per_class_accuracy <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(levels(fetal_health_test$fetal_health_cat))){
per_class_accuracy[l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(error = 1-sum(pred_knn_fh==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy)[l] <-
paste0("error_", levels(fetal_health_test$fetal_health_cat)[l])
}
# Add in trial number and method (60:40 split)
per_class_accuracy_6040_split <-
c(per_class_accuracy, "trial"=t, "method"="60_40_split")
################### Second, do 5-fold CV #########################
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=kfolds)
per_class_accuracy <- list()
# Do CV analysis for each fold
for(i in 1:length(individualfolds)){
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5)
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
# Save per-class accuracies from CV
per_class_accuracy[[i]] <-
rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(error = 1-sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <-
paste0("error_", levels(fetal_health_test$fetal_health_cat)[l])
}
}
# Bind together results from all K folds, take mean for estimate of accuracy
data_set_list_cv  <- do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
# Add in trial number and method (CV)
data_set_list_cv <- c(data_set_list_cv, "trial"=t,
"method"=paste0(kfolds, "_fold_CV"))
# Bind goether 60:40 split results and CV results for given trial
data_set_list_all[[t]] <-
data.frame(rbind(per_class_accuracy_6040_split, data_set_list_cv))
}
# Finally, bind together all results from all trials in dataset
data_set_list_all_trials <- do.call("rbind", data_set_list_all)
dim(data_set_list_all_trials)
data_set_list_all_trials
ggplot(data=data_set_list_all_trials, mapping=aes(x=method, y=error_1))+
geom_boxplot()
names(data_set_list_all_trials)
data_set_list_all_trials <- do.call("rbind", data_set_list_all) %>%
mutate(error_1 = as.numeric(error_1),
error_2 = as.numeric(error_2),
error_3 = as.numeric(error_3),)
# Now create boxplots
# Class 1
ggplot(data=data_set_list_all_trials, mapping=aes(x=method, y=error_1))+
geom_boxplot()
ggplot(data=data_set_list_all_trials, mapping=aes(x=method, y=error_2))+
geom_boxplot()
ggplot(data=data_set_list_all_trials, mapping=aes(x=method, y=error_3))+
geom_boxplot()
data_set_list_all_trials <- do.call("rbind", data_set_list_all)
# Convert error rates to numeric
data_set_list_all_trials[,1:3] <- lapply(data_set_list_all_trials[,1:3],
as.numeric)
ggplot(data=data_set_list_all_trials, mapping=aes(x=method, y=error_1))+
geom_boxplot()
library(ggpubr)
ggarrange(plotlist = list(plot_1, plot_2, plot_3),
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"))
plot_1 <- ggplot(data=data_set_list_all_trials,
mapping=aes(x=method, y=error_1, fill=method))+
geom_boxplot()
# Class 2
plot_2 <- ggplot(data=data_set_list_all_trials,
mapping=aes(x=method, y=error_2, fill=method))+
geom_boxplot()
# Class 3
plot_3 <- ggplot(data=data_set_list_all_trials,
mapping=aes(x=method, y=error_3, fill=method))+
geom_boxplot()
# Combine into single plot
ggarrange(plotlist = list(plot_1, plot_2, plot_3),
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"))
ggarrange(plotlist = list(plot_1, plot_2, plot_3),
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
common.legend = TRUE)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
common.legend = TRUE)
i=``
i=1
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
ggplot(data=data_set_list_all_trials,
mapping=aes(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
common.legend = TRUE)
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
common.legend = TRUE)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
common.legend = TRUE,
nrow=1)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
theme(legend.position = "none")+
theme_bw()
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
# Now create boxplots
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
theme_bw()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
labs(y=paste0("Class ", i, " test set error"), x="Method")+
theme_bw()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
plot_list <- list()
error_rates <- c("error_1", "error_2", "error_3")
for(i in 1:length(error_rates)){
plot_list[[i]] <-
ggplot(data=data_set_list_all_trials,
mapping=aes_string(x="method", y=error_rates[i], fill="method"))+
geom_boxplot()+
labs(y="Estimated test set error", x="Method")+
theme_bw()+
theme(legend.position = "none")
}
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
?ggarrange
tbl_summary(data=data_set_list_all_trials,
by=method)
?tbl_summary
tbl_summary(data=data_set_list_all_trials,
by=method,
include=c("error_1", "error_2", "error_3", "method"),
statistic = list(all_continuous() ~ "{mean} ({sd})"))
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
tbl_summary(data=data_set_list_all_trials,
by=method,
include=c("error_1", "error_2", "error_3", "method"),
statistic = list(all_continuous() ~ "{mean} ({sd})"),
)
tbl_summary(data=data_set_list_all_trials,
by=method,
include=c("error_1", "error_2", "error_3", "method"),
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = c("Class 1 Error Rate",
"Class 2 Error Rate",
"Class 3 Error Rate"))
tbl_summary(data=data_set_list_all_trials,
by=method,
include=c("error_1", "error_2", "error_3", "method"),
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(error_1~"Class 1 Error Rate",
error_2~"Class 2 Error Rate",
error_3~"Class 3 Error Rate"))
ggarrange(plotlist = plot_list,
labels = c("Class 1 Error", "Class 2 Error", "Class 3 Error"),
nrow=1)
tbl_summary(data=data_set_list_all_trials,
by=method,
include=c("error_1", "error_2", "error_3", "method"),
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(error_1~"Class 1 Error Rate",
error_2~"Class 2 Error Rate",
error_3~"Class 3 Error Rate"))
