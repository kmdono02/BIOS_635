fetal_health_subset %>%
filter(fetal_health_c==levels(fetal_health_c)[i]) %>%
summarise(accuracy = sum(knn_fh_pred==levels(fetal_health_c)[i])/n()) %>%
unlist()
names(per_class_accruacy)[i] <- paste0("accuracy_",
levels(fetal_health_subset$fetal_health_c)[i])
}
per_class_accruacy
tt_indicies <- createFolds(y=fetal_health_subset$fetal_health, k=5)
fetal_health_train2 <- fetal_health_subset[-tt_indicies[[f]],]
f=1
fetal_health_train2 <- fetal_health_subset[-tt_indicies[[f]],]
fetal_health_test2 <- fetal_health_subset[tt_indicies[[f]],]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
fetal_health_test2$knn_fh_pred <- predict(knn_train)
fetal_health_train2 <- fetal_health_subset[-tt_indicies[[f]],]
fetal_health_test2 <- fetal_health_subset[tt_indicies[[f]],]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
fetal_health_test2$knn_fh_pred <- predict(knn_train, newdata=fetal_health_test2)
confusionMatrix(data=fetal_health_test2$knn_fh_pred,
reference = fetal_health_test2$fetal_health_c)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, include=TRUE,
fig.width = 10, fig.height = 5)
library(tidyverse)
library(broom)
library(gtsummary)
library(flextable)
library(gt)
library(caret)
library(GGally)
set.seed(12)
fetal_health_subset <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement, uterine_contractions, light_decelerations, severe_decelerations, prolongued_decelerations, abnormal_short_term_variability, mean_value_of_short_term_variability, mean_value_of_long_term_variability, fetal_health) %>%
drop_na() %>%
mutate(fetal_health_c =
factor(fetal_health))
Table_1a <- as_flex_table( tbl_summary(data= fetal_health_subset,
by=fetal_health,
type= all_continuous() ~ "continuous",
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations', 'prolongued_decelerations', 'abnormal_short_term_variability', 'mean_value_of_short_term_variability', 'mean_value_of_long_term_variability', 'fetal_health'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~ "Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~ "Mean Value Of Long Term Variability",
fetal_health ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = c(baseline.value, accelerations,
fetal_movement, uterine_contractions, light_decelerations,
severe_decelerations, prolongued_decelerations,
abnormal_short_term_variability,
mean_value_of_short_term_variability,
mean_value_of_long_term_variability) ~ "aov")) %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
Table_1a
set.seed(12)
tt_indicies <- createDataPartition(y=fetal_health_subset$fetal_health, p=0.6,
list=FALSE)
tt_indicies
fetal_health_train2 <- fetal_health_subset[tt_indicies,]
fetal_health_test2 <- fetal_health_subset[-tt_indicies,]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
set.seed(12)
for(i in 1:100){
print(i)
tt_indicies <- createDataPartition(y=fetal_health_subset$fetal_health, p=0.6,
list=FALSE)
fetal_health_train2 <- fetal_health_subset[tt_indicies,]
fetal_health_test2 <- fetal_health_subset[-tt_indicies,]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
}
set.seed(12)
for(i in 1:10){
tt_indicies <- createDataPartition(y=fetal_health_subset$fetal_health, p=0.6,
list=FALSE)
fetal_health_train2 <- fetal_health_subset[tt_indicies,]
fetal_health_test2 <- fetal_health_subset[-tt_indicies,]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
}
set.seed(12)
start <- system.time()
start <- system.time()
?system.time
sys.time()
start <- proc.time()
start
set.seed(12)
start <- proc.time()
for(i in 1:10){
tt_indicies <- createDataPartition(y=fetal_health_subset$fetal_health, p=0.6,
list=FALSE)
fetal_health_train2 <- fetal_health_subset[tt_indicies,]
fetal_health_test2 <- fetal_health_subset[-tt_indicies,]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
}
proc.time()-start
?train
set.seed(12)
# Create 5 folds
tt_indicies <- createFolds(y=fetal_health_subset$fetal_health, k=200)
for(f in 1:length(tt_indicies)){
print(f)
fetal_health_train2 <- fetal_health_subset[-tt_indicies[[f]],]
fetal_health_test2 <- fetal_health_subset[tt_indicies[[f]],]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=5,
trControl = trainControl(method="cv", number=5))
fetal_health_test2$knn_fh_pred <- predict(knn_train, newdata=fetal_health_test2)
confusionMatrix(data=fetal_health_test2$knn_fh_pred,
reference = fetal_health_test2$fetal_health_c)
# Compute per class accuracy
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
for(i in 1:length(per_class_accruacy)){
per_class_accruacy[i] <-
fetal_health_subset %>%
filter(fetal_health_c==levels(fetal_health_c)[i]) %>%
summarise(accuracy = sum(knn_fh_pred==levels(fetal_health_c)[i])/n()) %>%
unlist()
names(per_class_accruacy)[i] <- paste0("accuracy_",
levels(fetal_health_subset$fetal_health_c)[i])
}
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, include=TRUE,
fig.width = 10, fig.height = 5)
library(tidyverse)
library(broom)
library(gtsummary)
library(flextable)
library(gt)
library(caret)
library(GGally)
set.seed(12)
fetal_health_subset <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement, uterine_contractions, light_decelerations, severe_decelerations, prolongued_decelerations, abnormal_short_term_variability, mean_value_of_short_term_variability, mean_value_of_long_term_variability, fetal_health) %>%
drop_na() %>%
mutate(fetal_health_c =
factor(fetal_health))
Table_1a <- as_flex_table( tbl_summary(data= fetal_health_subset,
by=fetal_health,
type= all_continuous() ~ "continuous",
statistic= all_continuous() ~ "{mean} ({sd})",
include = c('baseline.value',
'accelerations', 'fetal_movement', 'uterine_contractions',
'light_decelerations', 'severe_decelerations', 'prolongued_decelerations', 'abnormal_short_term_variability', 'mean_value_of_short_term_variability', 'mean_value_of_long_term_variability', 'fetal_health'),
label = list(baseline.value ~ "Baseline Value",
accelerations ~ "Accelerations",
fetal_movement ~ "Fetal Movement",
uterine_contractions ~ "Uterine Contractions",
light_decelerations ~ "Light Decelerations",
severe_decelerations ~ "Severe Decelerations",
prolongued_decelerations ~ "Prolongued Decelerations",
abnormal_short_term_variability ~ "Abnormal Short Term Variability",
mean_value_of_short_term_variability ~ "Mean Value Of Short Term Variability",
mean_value_of_long_term_variability ~ "Mean Value Of Long Term Variability",
fetal_health ~ "Fetal Health" ),
missing='no')%>%
add_n() %>%
add_p(test = c(baseline.value, accelerations,
fetal_movement, uterine_contractions, light_decelerations,
severe_decelerations, prolongued_decelerations,
abnormal_short_term_variability,
mean_value_of_short_term_variability,
mean_value_of_long_term_variability) ~ "aov")) %>%
bold( bold = TRUE, part = "header")  %>%
add_header_lines(values="Summary Statistics for Fetal Health Variables of Interest")
Table_1a
set.seed(12)
start <- proc.time()
for(i in 1:10){
tt_indicies <- createDataPartition(y=fetal_health_subset$fetal_health, p=0.6,
list=FALSE)
fetal_health_train2 <- fetal_health_subset[tt_indicies,]
fetal_health_test2 <- fetal_health_subset[-tt_indicies,]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=20)
}
proc.time()-start
set.seed(12)
# Create 5 folds
tt_indicies <- createFolds(y=fetal_health_subset$fetal_health, k=5)
f=1
print(f)
fetal_health_train2 <- fetal_health_subset[-tt_indicies[[f]],]
fetal_health_test2 <- fetal_health_subset[tt_indicies[[f]],]
knn_train <- train(form=fetal_health_c~., data=fetal_health_train2,
method="knn", tuneLength=5,
trControl = trainControl(method="cv", number=5))
fetal_health_test2$knn_fh_pred <- predict(knn_train, newdata=fetal_health_test2)
confusionMatrix(data=fetal_health_test2$knn_fh_pred,
reference = fetal_health_test2$fetal_health_c)
# Compute per class accuracy
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
confusionMatrix(data=fetal_health_test2$knn_fh_pred,
reference = fetal_health_test2$fetal_health_c)$byClass
View(confusionMatrix(data=fetal_health_test2$knn_fh_pred,
reference = fetal_health_test2$fetal_health_c)$byClass)
# Compute per class accuracy
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
for(i in 1:length(per_class_accruacy)){
per_class_accruacy[i] <-
fetal_health_subset %>%
filter(fetal_health_c==levels(fetal_health_c)[i]) %>%
summarise(accuracy = sum(knn_fh_pred==levels(fetal_health_c)[i])/n()) %>%
unlist()
names(per_class_accruacy)[i] <- paste0("accuracy_",
levels(fetal_health_subset$fetal_health_c)[i])
}
View(fetal_health_subset)
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
for(i in 1:length(per_class_accruacy)){
per_class_accruacy[i] <-
per_class_accruacy %>%
filter(fetal_health_c==levels(fetal_health_c)[i]) %>%
summarise(accuracy = sum(knn_fh_pred==levels(fetal_health_c)[i])/n()) %>%
unlist()
names(per_class_accruacy)[i] <- paste0("accuracy_",
levels(fetal_health_subset$fetal_health_c)[i])
}
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
per_class_accruacy <- rep(NA, length(levels(fetal_health_subset$fetal_health_c)))
for(i in 1:length(per_class_accruacy)){
per_class_accruacy[i] <-
fetal_health_test2 %>%
filter(fetal_health_c==levels(fetal_health_c)[i]) %>%
summarise(accuracy = sum(knn_fh_pred==levels(fetal_health_c)[i])/n()) %>%
unlist()
names(per_class_accruacy)[i] <- paste0("accuracy_",
levels(fetal_health_subset$fetal_health_c)[i])
}
per_class_accruacy
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, include=TRUE,
fig.width = 10, fig.height = 5)
library(tidyverse)
library(broom)
library(gtsummary)
library(flextable)
library(gt)
library(caret)
library(GGally)
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement, uterine_contractions, light_decelerations, severe_decelerations, prolongued_decelerations, abnormal_short_term_variability, mean_value_of_short_term_variability, mean_value_of_long_term_variability, fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health))
set.seed(12)
data_set_list <- list()
predict_fetal <- list()
per_class_accuracy <- list()
individualfolds <- list()
kfolds<-list(5,10,100)
k=5
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=k)
i=1
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),tuneGrid=expand.grid(k=5))
fetal_health_test$predict_fetal <- predict(KNNfit, newdata = fetal_health_test,type="raw")
per_class_accuracy <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
per_class_accuracy <- list()
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy)){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy)[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
per_class_accuracy
fetal_health_test
i
l=1
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),tuneGrid=expand.grid(k=5))
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l])
l=2
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
l=3
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy)){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
per_class_accuracy
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
per_class_accuracy
length(per_class_accuracy)
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
per_class_accuracy
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=k)
per_class_accuracy <- list()
for(i in 1:length(individualfolds)){
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),tuneGrid=expand.grid(k=5))
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
}
per_class_accuracy
do.call("rbind", per_class_accuracy)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE) %>%
mutate(fold=k)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE) %>%
as.data.frame() %>%
mutate(fold=k)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE) %>%
as.data.frame()
typeof(data_set_list[[k]])
k=1
data_set_list[[k]]  <- do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
data_set_list[[k]]
as.data.frame(data_set_list[[k]])
typeof(data_set_list[[k]])
list(data_set_list[[k]])
unlist(data_set_list[[k]])
data_set_list[[k]] <- c(data_set_list[[k]], "folds"=kfolds[k])
data_set_list
data_set_list[[k]]  <- do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
data_set_list[[k]]
kfolds[k]
kfolds
kfolds<-c(5,10,100)
c(data_set_list[[k]], "folds"=kfolds[k])
data_set_list[[k]] <- c(data_set_list[[k]], "folds"=kfolds[k])
data_set_list_all <- do.call("rbind", data_set_list)
data_set_list_all
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, include=TRUE,
fig.width = 10, fig.height = 5)
library(tidyverse)
library(broom)
library(gtsummary)
library(flextable)
library(gt)
library(caret)
library(GGally)
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement, uterine_contractions, light_decelerations, severe_decelerations, prolongued_decelerations, abnormal_short_term_variability, mean_value_of_short_term_variability, mean_value_of_long_term_variability, fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health))
set.seed(12)
data_set_list <- list()
predict_fetal <- list()
individualfolds <- list()
kfolds<-c(5,10,100)
kfolds
k=1
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=kfolds[k])
individualfolds
per_class_accuracy <- list()
i=1
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),tuneGrid=expand.grid(k=5))
data_set_list <- list()
predict_fetal <- list()
individualfolds <- list()
kfolds<-c(5,10,100)
knn_full_data <- train(fetal_health_cat ~., data = fetal_health_data, method = "knn",
preProcess = c("center","scale"), tuneLength=20)
knn_full_data
fetal_health_data$fetal_health_cat
fetal_health_data$fetal_health
set.seed(12)
fetal_health_data <- read.csv("data/fetal_health_subset.csv") %>%
select(baseline.value, accelerations, fetal_movement, uterine_contractions, light_decelerations, severe_decelerations, prolongued_decelerations, abnormal_short_term_variability, mean_value_of_short_term_variability, mean_value_of_long_term_variability, fetal_health) %>%
drop_na() %>%
mutate(fetal_health_cat =
factor(fetal_health)) %>%
select(-fetal_health)
set.seed(12)
data_set_list <- list()
predict_fetal <- list()
individualfolds <- list()
kfolds<-c(5,10,100)
knn_full_data <- train(fetal_health_cat ~., data = fetal_health_data, method = "knn",
preProcess = c("center","scale"), tuneLength=20)
knn_full_data
knn_full_data$bestTune
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
i
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
i
individualfolds<- createFolds(y=fetal_health_data$fetal_health_cat, k=kfolds[k])
per_class_accuracy <- list()
individualfolds[[i]]
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),
tuneGrid=knn_full_data$bestTune)
KNNfit
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
levels(fetal_health_test$fetal_health_cat)
length(levels(fetal_health_test$fetal_health_cat))
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
per_class_accuracy[[i]]
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
per_class_accuracy[[i]]
confusionMatrix(data = fetal_health_test$predict_fetal,
reference = fetal_health_test$fetal_health_cat)
confusionMatrix(data = fetal_health_test$predict_fetal,
reference = fetal_health_test$fetal_health_cat)$byClass
confusionMatrix(data = fetal_health_test$predict_fetal,
reference = fetal_health_test$fetal_health_cat)$byClass[,"Sensitivity"]
for(i in 1:length(individualfolds)){
fetal_health_train <- fetal_health_data[-individualfolds[[i]],]
fetal_health_test <- fetal_health_data[individualfolds[[i]],]
KNNfit<-train(fetal_health_cat ~., data = fetal_health_train, method = "knn",
preProcess = c("center","scale"),
tuneGrid=knn_full_data$bestTune)
fetal_health_test$predict_fetal <- predict(KNNfit, newdata =
fetal_health_test,type="raw")
per_class_accuracy[[i]] <- rep(NA, length(levels(fetal_health_test$fetal_health_cat)))
for(l in 1:length(per_class_accuracy[[i]])){
per_class_accuracy[[i]][l] <-
fetal_health_test %>%
filter(fetal_health_cat==levels(fetal_health_cat)[l]) %>%
summarise(accuracy = sum(predict_fetal==levels(fetal_health_cat)[l])/n()) %>%
unlist()
names(per_class_accuracy[[i]])[l] <- paste0("accuracy_",
levels(fetal_health_test$fetal_health_cat)[l])
}
}
per_class_accuracy
do.call("rbind", per_class_accuracy)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=mean, na.rm=TRUE)
do.call("rbind", per_class_accuracy) %>%
apply(MARGIN=2, FUN=sd, na.rm=TRUE)
